{"version":3,"file":"static/js/460.21a35d1c.chunk.js","mappings":"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","sources":["redux/public/selectorsChats.js","hooks/useChats.js","utils/safeToDate.js","webpack://my-react-app/./src/components/ChatsList/ChatsList.module.css?3c66","components/ChatsList/ChatsList.jsx","components/ChatsList/index.js","webpack://my-react-app/./src/components/commonComponents/ChatInput/ChatInput.module.css?8275","components/commonComponents/ChatInput/index.js","components/commonComponents/ChatInput/ChatInput.jsx","webpack://my-react-app/./src/components/ChatsAside/ChatsAside.module.css?1726","components/ChatsAside/ChatsAside.jsx","webpack://my-react-app/./src/components/ActiveChatModal/ActiveChatModal.module.css?f0c9","components/ActiveChatModal/ActiveChatModal.jsx","webpack://my-react-app/./src/components/ChatHeader/ChatHeader.module.css?1ebc","components/ChatHeader/ChatHeader.jsx","components/ChatHeader/index.js","webpack://my-react-app/./src/pages/ChatPage/ChatPage.module.css?88db","pages/ChatPage/index.js","pages/ChatPage/ChatPage.jsx"],"sourcesContent":["import { createSelector } from \"reselect\";\n\nconst selectChatsState = (state) => state.chats;\n\nexport const selectActiveChats = createSelector(\n  [selectChatsState],\n  (chatsState) => chatsState.activeChats\n);\n\nexport const selectChats = createSelector(\n  [selectChatsState],\n  (chatsState) => chatsState.chats\n);\n\nexport const selectLoading = createSelector(\n  [selectChatsState],\n  (chatsState) => chatsState.loading\n);\n\nexport const selectError = createSelector(\n  [selectChatsState],\n  (chatsState) => chatsState.error\n);\n\nexport const selectVisitedChatIds = createSelector(\n  [selectChatsState],\n  (chatsState) => chatsState.visitedChatIds\n);\n\nconst chatByIdSelectorCache = {};\n\nexport const selectChatById = (chatId) => {\n  if (!chatByIdSelectorCache[chatId]) {\n    chatByIdSelectorCache[chatId] = createSelector(\n      [selectChats],\n      (chats) => chats.find((chat) => chat.id === chatId) || null\n    );\n  }\n  return chatByIdSelectorCache[chatId];\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectError,\n  selectActiveChats,\n  selectLoading,\n  selectChats,\n  selectChatById,\n  selectVisitedChatIds,\n} from \"../redux/public/selectorsChats\";\n\nexport const useChats = () => {\n  const dispatch = useDispatch();\n  const activeChats = useSelector(selectActiveChats);\n  const isLoading = useSelector(selectLoading);\n  const errorChats = useSelector(selectError);\n  const chats = useSelector(selectChats);\n  const chatById = useSelector(selectChatById);\n  const visitedChatIds = useSelector(selectVisitedChatIds);\n\n  return {\n    activeChats,\n    isLoading,\n    errorChats,\n    chats,\n    chatById,\n    dispatch,\n    visitedChatIds,\n  };\n};\n","// Repară timestamp-urile \"corupte\" și întoarce un obiect Date valid sau null\nexport default function safeToDate(ts) {\n  if (!ts) return null;\n\n  // 1) încercare directă\n  const d1 = new Date(ts);\n  if (!isNaN(d1.getTime())) return d1;\n\n  // 2) repară secunde > 59 în format ISO (cu sau fără ms)\n  const fixed = ts.replace(\n    /T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{1,3}))?Z$/,\n    (_, hh, mm, ss, ms = \"000\") =>\n      `T${hh}:${mm}:${Math.min(Number(ss), 59)\n        .toString()\n        .padStart(2, \"0\")}.${ms.padEnd(3, \"0\")}Z`\n  );\n\n  const d2 = new Date(fixed);\n  if (!isNaN(d2.getTime())) return d2;\n\n  // 3) fallback: parse manual\n  const d3 = new Date(Date.parse(ts));\n  return isNaN(d3.getTime()) ? null : d3;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ChatsList_list__I-cRZ\",\"listItem\":\"ChatsList_listItem__kPu93\",\"globalLink\":\"ChatsList_globalLink__8cZMq\",\"active\":\"ChatsList_active__LcVu2\",\"isBlocked\":\"ChatsList_isBlocked__bvkN+\",\"youAreBlocked\":\"ChatsList_youAreBlocked__TWQ70\",\"youAreBlockedSpan\":\"ChatsList_youAreBlockedSpan__giape\",\"isBlockedSpan\":\"ChatsList_isBlockedSpan__bbKHT\",\"imgCont\":\"ChatsList_imgCont__pOqR3\",\"userImg\":\"ChatsList_userImg__Bdvyb\",\"global\":\"ChatsList_global__E-h8I\",\"isOnline\":\"ChatsList_isOnline__xmj-1\",\"online\":\"ChatsList_online__oLjAE\",\"notOnline\":\"ChatsList_notOnline__gBOoL\",\"infoCont\":\"ChatsList_infoCont__rZvnu\",\"name\":\"ChatsList_name__oTa81\",\"lastMessage\":\"ChatsList_lastMessage__AJabn\",\"notRead\":\"ChatsList_notRead__fSYdV\",\"settingsCont\":\"ChatsList_settingsCont__KMBhv\",\"btnCont\":\"ChatsList_btnCont__RAUBe\",\"modalCont\":\"ChatsList_modalCont__eVDCI\",\"modalContDark\":\"ChatsList_modalContDark__gC0RD\",\"modalContViolet\":\"ChatsList_modalContViolet__NCs2Q\",\"modalBtn\":\"ChatsList_modalBtn__0dJNK\",\"modalBtnB\":\"ChatsList_modalBtnB__jzQ2Y\",\"modalBtnNb\":\"ChatsList_modalBtnNb__ZrIWi\",\"modalBtnNotLight\":\"ChatsList_modalBtnNotLight__cv2Xy\"};","import React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { useMediaQuery } from \"react-responsive\";\n\nimport { NavLink, useNavigate, useParams } from \"react-router-dom\";\n\nimport { useDispatch } from \"react-redux\";\nimport {\n  accessChat,\n  toggleBlockUser,\n  deleteUser,\n  markChatAsRead,\n  markGlobalChatAsRead,\n} from \"../../redux/public/chatsSlice\"; // Assuming this is your async action\n\nimport { useChats } from \"../../hooks/useChats\";\n\nimport clsx from \"clsx\";\n\nimport safeToDate from \"../../utils/safeToDate\";\n\nimport { FaCog } from \"react-icons/fa\";\n\nimport roby from \"../../images/Roby.jpg\";\nimport gaby from \"../../images/teamMembersPhoto/Roby.jpg\";\nimport glob from \"../../images/global.png\";\n\nimport styles from \"./ChatsList.module.css\";\n\nconst breakpoints = {\n  mobile: \"(max-width: 767px)\",\n  tablet: \"(min-width:768px)\",\n  desktop: \"(min-width:1115px)\",\n};\nexport default function ChatsList({ search, theme }) {\n  const { chats } = useChats();\n  const { chatId } = useParams();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const modalRef = useRef(null);\n\n  const [reloadMap, setReloadMap] = useState({});\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n\n  // console.log(\"chats :\", chats);\n\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (modalRef.current && !modalRef.current.contains(event.target)) {\n        setIsSettingsVisible(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [modalRef]);\n\n  useEffect(() => {\n    if (chatId) {\n      dispatch(markChatAsRead({ chatId }));\n    }\n  }, [dispatch, chatId]);\n\n  const isMobile = useMediaQuery({ query: breakpoints.mobile });\n\n  const handleImageError = (chatId) => {\n    setTimeout(() => {\n      setReloadMap((prev) => ({\n        ...prev,\n        [chatId]: (prev[chatId] || 0) + 1,\n      }));\n    }, 1000);\n  };\n\n  // var 1 cu reduce\n  // const getLastInboxMessage = (chat) => {\n  //   const inboxMessages = chat?.messages?.filter((msg) => msg?.isInbox);\n  //   if (!inboxMessages?.length) return null;\n  //   const lastInboxMessage = inboxMessages?.reduce((latest, msg) =>\n  //     new Date(safeToDate(msg.sentAt)) > new Date(safeToDate(latest.sentAt))\n  //       ? msg\n  //       : latest\n  //   );\n\n  //   console.log(lastInboxMessage);\n\n  //   return lastInboxMessage;\n  // };\n\n  // var 2 cu reduce\n  // function getLastInboxMessage(chat) {\n  //   const inbox = chat?.messages?.filter((m) => m?.isInbox) ?? [];\n  //   if (!inbox.length) return null;\n\n  //   return inbox.reduce((latest, msg) => {\n  //     const dMsg = safeToDate(msg.sentAt);\n  //     const dLatest = safeToDate(latest.sentAt);\n  //     if (!dLatest) return msg; // dacă latest e invalid, ia msg\n  //     if (!dMsg) return latest; // dacă msg e invalid, păstrează latest\n  //     return dMsg > dLatest ? msg : latest;\n  //   });\n  // }\n\n  // var 3 cu sort\n  // const getLastInboxMessage = (chat) => {\n  //   if (!chat?.messages) return null;\n\n  //   const inboxMessages = chat.messages.filter((msg) => msg?.isInbox);\n  //   if (!inboxMessages.length) return null;\n\n  //   const sortedInboxMessages = inboxMessages\n  //     .slice() // copie ca să nu modifici array-ul original\n  //     .sort((a, b) => safeToDate(a.sentAt) - safeToDate(b.sentAt));\n\n  //   return sortedInboxMessages[sortedInboxMessages.length - 1] || null;\n  // };\n\n  // var 4 a mea cu sort\n  // const getLastInboxMessage = (chat) => {\n  //   const inboxMessages = chat?.messages?.filter((msg) => msg?.isInbox);\n  //   if (!inboxMessages?.length) return null;\n  //   const sortedInboxMessages = inboxMessages?.sort(\n  //     (a, b) => safeToDate(a.sentAt) - safeToDate(b.sentAt)\n  //   );\n\n  //   // console.log(\"lastInboxMessage :\", sortedInboxMessages);\n  //   const indexOfLastMessage = Number(sortedInboxMessages.length - 1);\n\n  //   // console.log(indexOfLastMessage);\n\n  //   return sortedInboxMessages[indexOfLastMessage];\n  // };\n\n  // var 5 cu reduce\n  function getLastInboxMessage(chat) {\n    const inboxMessages = chat?.messages?.filter((m) => m?.isInbox) || [];\n    if (!inboxMessages.length) return null;\n\n    return inboxMessages.reduce((latest, msg) => {\n      const dateMsg = safeToDate(msg.sentAt);\n      const dateLatest = safeToDate(latest.sentAt);\n\n      if (!dateMsg) return latest; // mesaj corupt → ignoră\n      if (!dateLatest) return msg; // latest corupt → ia msg\n\n      return dateMsg > dateLatest ? msg : latest;\n    }, inboxMessages[0]);\n  }\n\n  const filteredChats = (chats || []).filter((chat) => {\n    if (chat?.id === \"global\" || chat?.id === \"admin\") {\n      return false;\n    }\n    return chat?.user?.name?.toLowerCase().includes(search.toLowerCase());\n  });\n\n  // console.log(\"filteredChats :\", filteredChats);\n\n  const adminChats = chats?.filter((chat) => chat?.id === \"admin\");\n\n  // console.log(\"adminChats :\", adminChats);\n\n  const globalChats = chats?.find((chat) => chat?.id === \"global\");\n  const globalMessages = [];\n\n  // globalChats?.users?.map((user) => {\n  //   const userMessages = [];\n  //   const userInfo = { userId: user?.id, user: user?.user };\n  //   user?.messages.map((msg) => {\n  //     const completeDataMsg = { ...msg, ...userInfo };\n  //     return userMessages.push(completeDataMsg);\n  //   });\n  //   return globalMessages.push(...userMessages);\n  // });\n\n  globalChats?.users?.forEach((us) => {\n    const userInfo = { userId: us?.id, user: us?.user };\n    us?.messages?.forEach((msg) => {\n      globalMessages.push({ ...msg, ...userInfo });\n    });\n  });\n\n  // console.log(\"globalMessages :\", globalMessages);\n\n  // console.log(\"globalChats :\", globalChats);\n\n  function getLastGlobalInboxMessage(globalMessages) {\n    if (!globalMessages?.length) return null;\n\n    return globalMessages\n      .filter((msg) => msg.isInbox)\n      .reduce((latest, msg) => {\n        const latestDate = new Date(latest.sentAt);\n        const msgDate = new Date(msg.sentAt);\n        return msgDate > latestDate ? msg : latest;\n      });\n  }\n\n  const lastGlobalMessage = getLastGlobalInboxMessage(globalMessages);\n\n  // console.log(\"lastGlobalMessage :\", lastGlobalMessage);\n\n  function handleClick() {\n    setIsSettingsVisible(!isSettingsVisible);\n  }\n  function toggleBlock() {\n    dispatch(toggleBlockUser({ chatId }));\n  }\n\n  function deletehat() {\n    dispatch(deleteUser({ chatId }));\n  }\n\n  return (\n    <ul className={styles.list}>\n      {adminChats?.length > 0 ? (\n        adminChats.map((chat) => (\n          <li key={chat.id}>\n            <NavLink\n              to={`/home/chat/${chat.id}`}\n              className={({ isActive }) =>\n                clsx(styles.listItem, {\n                  [styles.active]: isActive,\n                  [styles.youAreBlocked]: chat?.user?.youAreBlocked,\n                })\n              }\n              onClick={() => {\n                dispatch(accessChat({ chatId: chat.id }));\n                dispatch(markChatAsRead({ chatId }));\n              }}>\n              <div className={styles.imgCont}>\n                <img\n                  key={\"admin\"}\n                  className={styles.userImg}\n                  src={gaby}\n                  alt=\"Admin img\"\n                  loading=\"lazy\"\n                />\n                <div\n                  className={clsx(\n                    styles.isOnline,\n                    chat?.user?.isOnline ? styles.online : styles.notOnline\n                  )}></div>\n              </div>\n              <div className={styles.infoCont}>\n                <p className={styles.name}>{chat?.user?.name}</p>\n                <p\n                  className={clsx(\n                    styles.lastMessage,\n                    getLastInboxMessage(chat)?.isRead === false &&\n                      styles.notRead\n                  )}>\n                  {getLastInboxMessage(chat)?.content || \"No messages yet\"}\n                </p>\n              </div>\n              {chat?.id !== \"admin\" && chat?.id !== \"global\" && (\n                <div className={styles.settingsCont}>\n                  <button\n                    onClick={handleClick}\n                    type=\"button\"\n                    className={styles.btnCont}>\n                    <FaCog\n                      size={isMobile ? 12 : 18}\n                      color=\"#161616cc\"\n                      className={styles.cogIcon}\n                    />\n                  </button>\n                  {isSettingsVisible && chat?.id === chatId && (\n                    <div\n                      ref={modalRef}\n                      className={clsx(\n                        styles.modalCont,\n                        theme === \"dark\" && styles.modalContDark,\n                        theme === \"violet\" && styles.modalContViolet\n                      )}>\n                      <button\n                        type=\"button\"\n                        className={clsx(\n                          styles.modalBtn,\n                          chat?.user?.isBlocked\n                            ? styles.modalBtnB\n                            : styles.modalBtnNb\n                        )}\n                        onClick={toggleBlock}>\n                        {chat?.user?.isBlocked ? `Unblock...🔓` : `Block...🚫`}\n                      </button>\n                      <button\n                        type=\"button\"\n                        className={clsx(\n                          styles.modalBtn,\n                          theme !== \"light\" && styles.modalBtnNotLight\n                        )}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          e.preventDefault();\n                          deletehat();\n                          navigate(\"/home/chat\");\n                        }}>\n                        Delete\n                      </button>\n                    </div>\n                  )}\n                </div>\n              )}\n              {chat?.user?.youAreBlocked && (\n                <span className={styles.youAreBlockedSpan}>🚫</span>\n              )}\n              {chat?.user?.isBlocked && (\n                <span className={styles.isBlockedSpan}>🚫</span>\n              )}\n            </NavLink>\n          </li>\n        ))\n      ) : (\n        <li className={styles.empty}>No chats found</li>\n      )}\n      <li key={\"global\"}>\n        <NavLink\n          to={\"/home/chat/global\"}\n          className={({ isActive }) =>\n            clsx(styles.listItem, styles.globalLink, {\n              [styles.active]: isActive,\n            })\n          }\n          onClick={() => {\n            dispatch(markGlobalChatAsRead({ chatId }));\n          }}>\n          <div className={styles.imgCont}>\n            <img\n              className={clsx(styles.userImg, styles.global)}\n              src={glob}\n              alt=\"User Global img\"\n              loading=\"lazy\"\n            />\n            <div className={clsx(styles.isOnline, styles.online)}></div>\n          </div>\n          <div className={styles.infoCont}>\n            <p className={styles.name}>Global</p>\n            <p\n              className={clsx(\n                styles.lastMessage,\n                !lastGlobalMessage?.isRead && styles.notRead\n              )}>\n              {lastGlobalMessage.content || \"No messages yet\"}\n            </p>\n          </div>\n\n          {globalChats.user?.youAreBlocked && (\n            <span className={styles.youAreBlockedSpan}>🚫</span>\n          )}\n        </NavLink>\n      </li>\n      {filteredChats?.length > 0 ? (\n        filteredChats.map((chat) => (\n          <li key={chat.id}>\n            <NavLink\n              to={`/home/chat/${chat.id}`}\n              className={({ isActive }) =>\n                clsx(styles.listItem, {\n                  [styles.active]: isActive,\n                  [styles.isBlocked]: chat?.user?.isBlocked,\n                  [styles.youAreBlocked]: chat?.user?.youAreBlocked,\n                })\n              }\n              onClick={() => {\n                dispatch(accessChat({ chatId: chat.id }));\n                dispatch(markChatAsRead({ chatId }));\n              }}>\n              <div className={styles.imgCont}>\n                <img\n                  key={reloadMap[chat.id] || 0}\n                  className={styles.userImg}\n                  src={chat.id === \"admin\" ? gaby : chat?.user?.avatar ?? roby}\n                  alt=\"User img\"\n                  loading=\"lazy\"\n                  onError={() => handleImageError(chat.id)}\n                />\n                <div\n                  className={clsx(\n                    styles.isOnline,\n                    chat?.user?.isOnline ? styles.online : styles.notOnline\n                  )}></div>\n              </div>\n              <div className={styles.infoCont}>\n                <p className={styles.name}>{chat?.user?.name}</p>\n                <p\n                  className={clsx(\n                    styles.lastMessage,\n                    getLastInboxMessage(chat)?.isRead === false &&\n                      styles.notRead\n                  )}>\n                  {getLastInboxMessage(chat)?.content || \"No messages yet\"}\n                </p>\n              </div>\n              {chat?.id !== \"admin\" && chat?.id !== \"global\" && (\n                <div className={styles.settingsCont}>\n                  <button\n                    onClick={handleClick}\n                    type=\"button\"\n                    className={styles.btnCont}>\n                    <FaCog\n                      size={isMobile ? 12 : 18}\n                      color=\"#161616cc\"\n                      className={styles.cogIcon}\n                    />\n                  </button>\n                  {isSettingsVisible && chat?.id === chatId && (\n                    <div\n                      ref={modalRef}\n                      className={clsx(\n                        styles.modalCont,\n                        theme === \"dark\" && styles.modalContDark,\n                        theme === \"violet\" && styles.modalContViolet\n                      )}>\n                      <button\n                        type=\"button\"\n                        className={clsx(\n                          styles.modalBtn,\n                          chat?.user?.isBlocked\n                            ? styles.modalBtnB\n                            : styles.modalBtnNb\n                        )}\n                        onClick={toggleBlock}>\n                        {chat?.user?.isBlocked ? `Unblock...🔓` : `Block...🚫`}\n                      </button>\n                      <button\n                        type=\"button\"\n                        className={clsx(\n                          styles.modalBtn,\n                          theme !== \"light\" && styles.modalBtnNotLight\n                        )}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          e.preventDefault();\n                          deletehat();\n                          navigate(\"/home/chat\");\n                        }}>\n                        Delete\n                      </button>\n                    </div>\n                  )}\n                </div>\n              )}\n              {chat?.user?.youAreBlocked && (\n                <span className={styles.youAreBlockedSpan}>🚫</span>\n              )}\n              {chat?.user?.isBlocked && (\n                <span className={styles.isBlockedSpan}>🚫</span>\n              )}\n            </NavLink>\n          </li>\n        ))\n      ) : (\n        <li className={styles.empty}>No chats found</li>\n      )}\n    </ul>\n  );\n}\n\nChatsList.propTypes = {\n  search: PropTypes.string,\n  theme: PropTypes.string,\n};\n","import ChatsList from \"./ChatsList\";\n\nexport default ChatsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"inputContainer\":\"ChatInput_inputContainer__IBOKh\",\"input\":\"ChatInput_input__s+2Y2\",\"inputCenter\":\"ChatInput_inputCenter__Ckgec\",\"inputInfo\":\"ChatInput_inputInfo__HNq2h\",\"autoResizeTextarea\":\"ChatInput_autoResizeTextarea__nF2eA\"};","import ChatInput from \"./ChatInput\";\n\nexport default ChatInput;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\n\nimport styles from \"./ChatInput.module.css\";\n\nexport default function ChatInput({\n  type,\n  placeholder,\n  required,\n  className,\n  name,\n  handleChange,\n  width,\n  value,\n  paddingLeft,\n  autoComplete,\n  handleBlur,\n  children,\n  textarea = false,\n}) {\n  const commonProps = {\n    autoComplete: autoComplete || \"off\",\n    style: { paddingLeft: paddingLeft || \"0px\" },\n    onChange: handleChange,\n    name: name || \"\",\n    className: clsx(styles.input, className),\n    placeholder: placeholder || \"\",\n    required: required || false,\n    value: value || \"\",\n    onBlur: handleBlur,\n  };\n\n  return (\n    <div style={{ width: width || \"auto\" }} className={styles.inputContainer}>\n      {textarea ? (\n        <textarea\n          {...commonProps}\n          rows=\"1\"\n          //   onInput={(e) => {\n          //     handleChange && handleChange(e);\n          //   }}\n          className={clsx(styles.input, className)} // adaugi o clasă\n        />\n      ) : (\n        <input\n          className={clsx(styles.input, className)}\n          {...commonProps}\n          type={type || \"text\"}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nChatInput.propTypes = {\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  paddingLeft: PropTypes.string,\n  autoComplete: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  name: PropTypes.string,\n  type: PropTypes.string,\n  handleChange: PropTypes.func,\n  handleBlur: PropTypes.func,\n  required: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  textarea: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  placeholder: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  children: PropTypes.node,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"aside\":\"ChatsAside_aside__3mHuE\",\"asideContent\":\"ChatsAside_asideContent__KW7KY\",\"asideNewMesgBtn\":\"ChatsAside_asideNewMesgBtn__wTMSw\",\"newMsgCont\":\"ChatsAside_newMsgCont__ZBmvI\",\"listCont\":\"ChatsAside_listCont__F8BeV\",\"list\":\"ChatsAside_list__kH74V\",\"closeButton\":\"ChatsAside_closeButton__C1ibd\",\"listItem\":\"ChatsAside_listItem__ub3VY\",\"isBlocked\":\"ChatsAside_isBlocked__fe84o\",\"youAreBlocked\":\"ChatsAside_youAreBlocked__R5MaO\",\"imgCont\":\"ChatsAside_imgCont__UwrD6\",\"userImg\":\"ChatsAside_userImg__x3ke5\",\"isOnline\":\"ChatsAside_isOnline__Fj+J2\",\"online\":\"ChatsAside_online__UVkdd\",\"notOnline\":\"ChatsAside_notOnline__wL-+V\",\"infoCont\":\"ChatsAside_infoCont__xw2Su\",\"name\":\"ChatsAside_name__e7ugw\",\"lastMessage\":\"ChatsAside_lastMessage__+7zt+\",\"notRead\":\"ChatsAside_notRead__k6G7A\",\"youAreBlockedSpan\":\"ChatsAside_youAreBlockedSpan__oaX+j\",\"asideInput\":\"ChatsAside_asideInput__uYH6S\",\"asideInputButton\":\"ChatsAside_asideInputButton__B2-T-\",\"asideInputSearchIcon\":\"ChatsAside_asideInputSearchIcon__faP6M\",\"asideChatListCont\":\"ChatsAside_asideChatListCont__+VFhF\"};","import React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { NavLink } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\nimport { useChats } from \"../../hooks/useChats\";\nimport { accessChat, markChatAsRead } from \"../../redux/public/chatsSlice\";\n\nimport clsx from \"clsx\";\n\nimport ChatsList from \"../ChatsList\";\nimport ChatInput from \"../commonComponents/ChatInput\";\n\nimport safeToDate from \"../../utils/safeToDate\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\nimport { FaEnvelope } from \"react-icons/fa\";\n\nimport roby from \"../../images/Roby.jpg\";\nimport gaby from \"../../images/teamMembersPhoto/Roby.jpg\";\n\nimport styles from \"./ChatsAside.module.css\";\n\nexport default function ChatsAside({ isBlocked, theme }) {\n  const { chats } = useChats();\n\n  const noReadRef = useRef(null);\n\n  const dispatch = useDispatch();\n\n  const [isNoReadVisible, setIsNoReadVisible] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [reloadMap, setReloadMap] = useState({});\n\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (noReadRef.current && !noReadRef.current.contains(event.target)) {\n        setIsNoReadVisible(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [noReadRef]);\n\n  const notReadMessagesChats = [...chats]?.filter((chat) => {\n    return chat?.messages?.find(\n      (msg) => msg.isInbox === true && msg.isRead === false\n    );\n  });\n\n  // console.log(\"notReadMessagesChats :\", notReadMessagesChats);\n\n  function getLastInboxMessage(chat) {\n    const inboxMessages = chat?.messages.filter((m) => m?.isInbox) || {};\n\n    return inboxMessages.reduce((latest, msg) => {\n      return new Date(safeToDate(latest?.sentAt)) >\n        new Date(safeToDate(msg?.sentAt))\n        ? latest\n        : msg;\n    });\n  }\n\n  const handleImageError = (chatId) => {\n    setTimeout(() => {\n      setReloadMap((prev) => ({\n        ...prev,\n        [chatId]: (prev[chatId] || 0) + 1,\n      }));\n    }, 1000);\n  };\n\n  return (\n    <aside className={styles.aside}>\n      <div className={styles.asideContent}>\n        {notReadMessagesChats.length > 0 && (\n          <div ref={noReadRef} className={styles.newMsgCont}>\n            <button\n              className={styles.asideNewMesgBtn}\n              onClick={() => setIsNoReadVisible(!isNoReadVisible)}>\n              New...\n              <FaEnvelope className={styles.newMsgSvg} />\n            </button>\n            {isNoReadVisible && (\n              <div className={styles.listCont}>\n                <button\n                  className={styles.closeButton}\n                  onClick={() => setIsNoReadVisible(false)}\n                  type=\"button\">\n                  X\n                </button>\n                <ul className={styles.list}>\n                  {notReadMessagesChats.map((chat) => {\n                    return (\n                      <li key={chat?.id}>\n                        <NavLink\n                          to={`/home/chat/${chat?.id}`}\n                          className={clsx(\n                            styles.listItem,\n                            chat?.user?.isBlocked && styles.isBlocked,\n                            chat?.user?.youAreBlocked && styles.youAreBlocked\n                          )}\n                          onClick={() => {\n                            setIsNoReadVisible(false);\n                            dispatch(accessChat({ chatId: chat?.id }));\n                            dispatch(markChatAsRead({ chatId: chat?.id }));\n                          }}>\n                          <div className={styles.imgCont}>\n                            <img\n                              key={reloadMap[chat.id] || 0}\n                              className={styles.userImg}\n                              src={\n                                chat.id === \"admin\"\n                                  ? gaby\n                                  : chat?.user?.avatar ?? roby\n                              }\n                              alt=\"User img\"\n                              loading=\"lazy\"\n                              onError={() => handleImageError(chat.id)}\n                            />\n                            <div\n                              className={clsx(\n                                styles.isOnline,\n                                chat?.user?.isOnline\n                                  ? styles.online\n                                  : styles.notOnline\n                              )}></div>\n                          </div>\n                          <div className={styles.infoCont}>\n                            <p className={styles.name}>{chat?.user?.name}</p>\n                            <p\n                              className={clsx(\n                                styles.lastMessage,\n                                styles.notRead\n                              )}>\n                              {getLastInboxMessage(chat)?.content ||\n                                \"No messages yet\"}\n                            </p>\n                          </div>\n                          {chat?.user?.youAreBlocked && (\n                            <span className={styles.youAreBlockedSpan}>🚫</span>\n                          )}\n                        </NavLink>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            )}\n          </div>\n        )}\n        <ChatInput\n          className={styles.asideInput}\n          paddingLeft={\"18px\"}\n          placeholder={\"Search...\"}\n          value={search}\n          handleChange={(e) => setSearch(e.target.value)}>\n          <button className={styles.asideInputButton}>\n            <FontAwesomeIcon\n              className={styles.asideInputSearchIcon}\n              icon={faMagnifyingGlass}\n            />\n          </button>\n        </ChatInput>\n        <div className={styles.asideChatListCont}>\n          <ChatsList theme={theme} search={search} />\n        </div>\n      </div>\n    </aside>\n  );\n}\n\nChatsAside.propTypes = {\n  isBlocked: PropTypes.bool,\n  theme: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"chatList\":\"ActiveChatModal_chatList__Q9fFe\",\"closeButton\":\"ActiveChatModal_closeButton__l6I0l\",\"noActive\":\"ActiveChatModal_noActive__PZy9L\",\"chatListItem\":\"ActiveChatModal_chatListItem__6sAea\",\"avatar\":\"ActiveChatModal_avatar__EvQWo\",\"usersInfo\":\"ActiveChatModal_usersInfo__coDBx\",\"userName\":\"ActiveChatModal_userName__oP5eh\",\"reply\":\"ActiveChatModal_reply__O8ION\"};","import React, { useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { useChats } from \"../../hooks/useChats\";\n\nimport gaby from \"../../images/teamMembersPhoto/Roby.jpg\";\nimport glob from \"../../images/global.png\";\n\nimport styles from \"./ActiveChatModal.module.css\";\n\nexport default function ActiveChatModal({ chats, closeModal }) {\n  const modalRef = useRef();\n  const { visitedChatIds } = useChats();\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (modalRef.current && !modalRef.current.contains(event.target)) {\n        closeModal();\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [closeModal]);\n\n  const activeChats = chats.filter((chat) => visitedChatIds.includes(chat.id));\n\n  return (\n    <div ref={modalRef}>\n      <ul className={styles.chatList}>\n        <button\n          className={styles.closeButton}\n          onClick={closeModal}\n          type=\"button\">\n          X\n        </button>\n        <li key={\"globalH\"} className={styles.chatListItem}>\n          <Link to={`/home/chat/global`} onClick={closeModal}>\n            <img\n              src={glob}\n              alt=\"Avatar\"\n              className={styles.avatar}\n              loading=\"lazy\"\n            />\n            <div className={styles.usersInfo}>\n              <span className={styles.userName}>Global</span>\n              <span className={styles.reply}>Reply...</span>\n            </div>\n          </Link>\n        </li>\n        {activeChats.map((chat) =>\n          chat?.id !== \"global\" ? (\n            <li key={chat.id} className={styles.chatListItem}>\n              <Link to={`/home/chat/${chat.id}`} onClick={closeModal}>\n                <img\n                  src={chat.id === \"admin\" ? gaby : chat?.user?.avatar}\n                  alt=\"Avatar\"\n                  className={styles.avatar}\n                  loading=\"lazy\"\n                />\n                <div className={styles.usersInfo}>\n                  <span className={styles.userName}>{chat?.user?.name}</span>\n                  <span className={styles.reply}>Reply...</span>\n                </div>\n              </Link>\n            </li>\n          ) : null\n        )}\n      </ul>\n    </div>\n  );\n}\n\nActiveChatModal.propTypes = {\n  chats: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      user: PropTypes.shape({\n        avatar: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n      }).isRequired,\n    })\n  ).isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"ChatHeader_header__sYB9S\",\"asideHeader\":\"ChatHeader_asideHeader__3HEkW\",\"asideHeaderTitle\":\"ChatHeader_asideHeaderTitle__jNGTA\",\"asideHeaderCounter\":\"ChatHeader_asideHeaderCounter__S7TPJ\",\"chatHeaderRight\":\"ChatHeader_chatHeaderRight__UCw0f\",\"leftCont\":\"ChatHeader_leftCont__wIxId\",\"chatInfo\":\"ChatHeader_chatInfo__yqipb\",\"avatar\":\"ChatHeader_avatar__xU414\",\"usersInfo\":\"ChatHeader_usersInfo__T6Apf\",\"userName\":\"ChatHeader_userName__45JlD\",\"noLight\":\"ChatHeader_noLight__A3NKs\",\"reply\":\"ChatHeader_reply__uD5RZ\",\"rightContButton\":\"ChatHeader_rightContButton__OKbTe\",\"button\":\"ChatHeader_button__Dm29Y\"};","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { useParams } from \"react-router-dom\";\n\nimport { useChats } from \"../../hooks/useChats\";\n\nimport clsx from \"clsx\";\n\nimport ActiveChatModal from \"../ActiveChatModal/ActiveChatModal\";\n\nimport { FaEllipsisH } from \"react-icons/fa\";\n\nimport gaby from \"../../images/teamMembersPhoto/Roby.jpg\";\nimport glob from \"../../images/global.png\";\n\nimport styles from \"./ChatHeader.module.css\";\n\nfunction ChatHeader({ theme }) {\n  const { chatId } = useParams();\n  const { activeChats, chats } = useChats();\n  const selectedChat = chats.find((chat) => chat.id === chatId);\n\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => setShowModal((prev) => !prev);\n\n  return (\n    <div className={clsx(styles.header)}>\n      <div className={styles.asideHeader}>\n        <p\n          className={clsx(\n            styles.asideHeaderTitle,\n            theme !== \"light\" && styles.noLight\n          )}>\n          Active\n        </p>\n        <div className={styles.asideHeaderCounter}>{activeChats}</div>\n      </div>\n      <div className={styles.chatHeaderRight}>\n        {showModal && (\n          <ActiveChatModal chats={chats} closeModal={toggleModal} />\n        )}\n        {selectedChat ? (\n          <div className={styles.chatInfo}>\n            <img\n              src={\n                selectedChat.id === \"admin\"\n                  ? gaby\n                  : selectedChat.id === \"global\"\n                  ? glob\n                  : selectedChat.user.avatar\n              }\n              alt=\"Avatar\"\n              className={styles.avatar}\n            />\n            <div className={styles.usersInfo}>\n              <span\n                className={clsx(\n                  styles.userName,\n                  theme !== \"light\" && styles.noLight\n                )}>\n                {selectedChat?.user?.name}\n              </span>\n              <span className={styles.reply}>Reply</span>\n            </div>\n          </div>\n        ) : (\n          <div className={styles.chatInfo}>\n            <img src={glob} alt=\"Avatar\" className={styles.avatar} />\n            <div className={styles.usersInfo}>\n              <span\n                className={clsx(\n                  styles.userName,\n                  theme !== \"light\" && styles.noLight\n                )}>\n                Global\n              </span>\n              <span className={styles.reply}>Reply</span>\n            </div>\n          </div>\n        )}\n        <button className={clsx(styles.rightContButton)} onClick={toggleModal}>\n          <FaEllipsisH size={16} className={styles.button} />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatHeader;\n\nChatHeader.propTypes = {\n  theme: PropTypes.string,\n};\n","import ChatHeader from \"./ChatHeader\";\n\nexport default ChatHeader;\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"ChatPage_cont__7VJ-l\",\"lightCont\":\"ChatPage_lightCont__WQleb\",\"darkCont\":\"ChatPage_darkCont__bU2Pt\",\"violetCont\":\"ChatPage_violetCont__ZSN2u\",\"content\":\"ChatPage_content__Rt+WH\",\"main\":\"ChatPage_main__6DIbi\",\"sendMsgCont\":\"ChatPage_sendMsgCont__gCZXa\",\"sendMsgInput\":\"ChatPage_sendMsgInput__2pJuU\",\"writeMsgButton\":\"ChatPage_writeMsgButton__UWYJz\",\"paperClipIcon\":\"ChatPage_paperClipIcon__b6Umr\",\"emojiWrapper\":\"ChatPage_emojiWrapper__3QUTM\",\"smileIcon\":\"ChatPage_smileIcon__U6la2\",\"emojiPicker\":\"ChatPage_emojiPicker__WVEAX\",\"sendButtonCont\":\"ChatPage_sendButtonCont__+VypV\",\"sendMsgButton\":\"ChatPage_sendMsgButton__kraaH\",\"sendBlocked\":\"ChatPage_sendBlocked__O52pu\",\"sendIcon\":\"ChatPage_sendIcon__MJcgz\",\"emojiPickerWrapper\":\"ChatPage_emojiPickerWrapper__MRts-\",\"blockSpan\":\"ChatPage_blockSpan__gxp6R\"};","import ChatPage from \"./ChatPage\";\n\nexport default ChatPage;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Outlet, useNavigate } from \"react-router-dom\";\n\nimport clsx from \"clsx\";\n\nimport { useDispatch } from \"react-redux\";\nimport {\n  accessChat,\n  markGlobalChatAsRead,\n  updateChat,\n} from \"../../redux/public/chatsSlice\";\nimport { useParams } from \"react-router-dom\";\nimport { useChats } from \"../../hooks/useChats\";\n\nimport ChatsAside from \"../../components/ChatsAside/ChatsAside\";\nimport ChatHeader from \"../../components/ChatHeader\";\nimport ChatInput from \"../../components/commonComponents/ChatInput\";\n\nimport { FaPaperclip, FaRegSmile, FaPaperPlane } from \"react-icons/fa\";\nimport EmojiPicker from \"emoji-picker-react\";\n\nimport styles from \"./ChatPage.module.css\";\n\nexport default function ChatPage() {\n  const { chats } = useChats();\n\n  const { chatId } = useParams();\n\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n  const fileInputRef = useRef();\n  const blockRef = useRef(null);\n\n  const [message, setMessage] = useState(\"\");\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [file, setFile] = useState(null);\n  const [showBlockMsg, setShowBlockMsg] = useState(false);\n  const [showYouAreBlockMsg, setShowYouAreBlockMsg] = useState(false);\n\n  const user = chats.find((u) => u.id === chatId);\n\n  const handleSendMsg = () => {\n    if (!message.trim()) return;\n\n    dispatch(\n      updateChat({\n        chatId,\n        newMessages: [\n          {\n            id: crypto.randomUUID(),\n            content: message,\n            isInbox: false,\n            sentAt: new Date().toISOString(),\n          },\n        ],\n      })\n    );\n    setMessage(\"\");\n    setShowEmojiPicker(false);\n    setFile(null);\n  };\n\n  const handleAttachClick = () => {\n    fileInputRef.current.click();\n  };\n\n  useEffect(() => {\n    if (chatId) {\n      dispatch(accessChat({ chatId }));\n    }\n  }, [chatId, dispatch]);\n\n  useEffect(() => {\n    if (chatId === \"global\") {\n      dispatch(markGlobalChatAsRead({ chatId }));\n    }\n  }, [chatId, dispatch]);\n\n  useEffect(() => {\n    if (!chatId) {\n      navigate(\"/home/chat/global\");\n    }\n  }, [navigate, chatId, dispatch]);\n\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (blockRef.current && !blockRef.current.contains(event.target)) {\n        setShowBlockMsg(false);\n        setShowYouAreBlockMsg(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [blockRef]);\n\n  const handleFileChange = (e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile) {\n      setFile(selectedFile);\n    }\n  };\n\n  const toggleEmojiPicker = () => {\n    setShowEmojiPicker((prev) => !prev);\n  };\n\n  const handleEmojiClick = (emojiData) => {\n    setMessage((prev) => prev + emojiData.emoji);\n  };\n\n  const theme = localStorage.getItem(\"theme\") || \"dark\";\n\n  return (\n    <div\n      className={clsx(\n        styles.cont,\n        theme === \"light\"\n          ? styles.lightCont\n          : theme === \"violet\"\n          ? styles.violetCont\n          : styles.darkCont\n      )}>\n      <ChatHeader theme={theme} />\n      <div className={clsx(styles.content)}>\n        <ChatsAside\n          isBlocked={user?.user?.isBlocked || user?.user?.youAreBlocked}\n          theme={theme}\n        />\n        <section className={styles.main}>\n          <Outlet context={{ file }} />\n        </section>\n      </div>\n      <div className={styles.sendMsgCont}>\n        <ChatInput\n          type=\"textarea\"\n          textarea\n          width=\"100%\"\n          className={styles.sendMsgInput}\n          paddingLeft=\"5px\"\n          placeholder=\"Type here...\"\n          value={message}\n          handleChange={(e) => setMessage(e.target.value)}>\n          <button\n            type=\"button\"\n            className={styles.writeMsgButton}\n            onClick={handleAttachClick}>\n            <FaPaperclip className={styles.paperClipIcon} size={16} />\n          </button>\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            onChange={handleFileChange}\n            style={{ display: \"none\" }}\n          />\n\n          <div className={styles.emojiWrapper}>\n            <button\n              type=\"button\"\n              className={styles.writeMsgButton}\n              onClick={toggleEmojiPicker}>\n              <FaRegSmile className={styles.smileIcon} size={16} />\n            </button>\n            {showEmojiPicker && (\n              <div className={styles.emojiPicker}>\n                <EmojiPicker\n                  onEmojiClick={handleEmojiClick}\n                  width={250}\n                  height={300}\n                  previewConfig={{ showPreview: false }}\n                  searchPlaceHolder=\"Search emoji...\"\n                />\n              </div>\n            )}\n          </div>\n        </ChatInput>\n\n        <div ref={blockRef} className={styles.sendButtonCont}>\n          {user?.user?.isBlocked &&\n            !user?.user?.youAreBlocked &&\n            showBlockMsg && (\n              <p className={styles.blockSpan}>\n                🚫 You have blocked <b>{user?.user?.name} !</b> Find them in{\" \"}\n                <b>Chats List → Settings</b> and unblock to send messages.\n              </p>\n            )}\n          {chatId !== \"global\" &&\n            user?.user?.youAreBlocked &&\n            showYouAreBlockMsg && (\n              <p className={styles.blockSpan}>\n                🚫 You are blocked by <b>{user?.user?.name} !</b>\n                You cannot send messages to them.\n              </p>\n            )}\n          {chatId === \"global\" && showYouAreBlockMsg && (\n            <p className={styles.blockSpan}>\n              🚫 You are blocked by <b>Admin !</b>\n              You cannot send messages to <b>Global !</b> Please, contact{\" \"}\n              <b>Admin</b> for more info...!\n            </p>\n          )}\n          <button\n            type=\"button\"\n            className={clsx(\n              styles.sendMsgButton,\n              (user?.user?.isBlocked || user?.user?.youAreBlocked) &&\n                styles.sendBlocked\n            )}\n            onClick={() => {\n              !user?.user?.isBlocked &&\n                !user?.user?.youAreBlocked &&\n                handleSendMsg();\n              if (user?.user?.isBlocked && !user?.user?.youAreBlocked) {\n                setShowBlockMsg(!showBlockMsg);\n                setShowYouAreBlockMsg(false);\n              }\n              if (user?.user?.youAreBlocked) {\n                setShowYouAreBlockMsg(!showYouAreBlockMsg);\n                setShowBlockMsg(false);\n              }\n            }}>\n            <FaPaperPlane className={styles.sendIcon} size={18} />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["selectChatsState","state","chats","selectActiveChats","createSelector","chatsState","activeChats","selectChats","selectLoading","loading","selectError","error","selectVisitedChatIds","visitedChatIds","chatByIdSelectorCache","selectChatById","chatId","find","chat","id","useChats","dispatch","useDispatch","useSelector","isLoading","errorChats","chatById","safeToDate","ts","d1","Date","isNaN","getTime","fixed","replace","_","hh","mm","ss","ms","arguments","length","undefined","concat","Math","min","Number","toString","padStart","padEnd","d2","d3","parse","breakpoints","_ref","_globalChats$users","_globalChats$user","search","theme","useParams","navigate","useNavigate","modalRef","useRef","reloadMap","setReloadMap","useState","isSettingsVisible","setIsSettingsVisible","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","markChatAsRead","isMobile","useMediaQuery","query","getLastInboxMessage","_chat$messages","inboxMessages","messages","filter","m","isInbox","reduce","latest","msg","dateMsg","sentAt","dateLatest","filteredChats","_chat$user","_chat$user$name","user","name","toLowerCase","includes","adminChats","globalChats","globalMessages","users","forEach","us","_us$messages","userInfo","userId","push","_objectSpread","lastGlobalMessage","latestDate","getLastGlobalInboxMessage","handleClick","toggleBlock","toggleBlockUser","deletehat","deleteUser","_jsxs","className","styles","list","children","map","_chat$user3","_chat$user4","_getLastInboxMessage","_getLastInboxMessage2","_chat$user5","_chat$user6","_chat$user7","_chat$user8","_jsx","NavLink","to","_ref2","_chat$user2","isActive","clsx","listItem","active","youAreBlocked","onClick","accessChat","imgCont","userImg","src","gaby","alt","isOnline","online","notOnline","infoCont","lastMessage","isRead","notRead","content","settingsCont","type","btnCont","FaCog","size","color","cogIcon","ref","modalCont","modalContDark","modalContViolet","modalBtn","isBlocked","modalBtnB","modalBtnNb","modalBtnNotLight","e","stopPropagation","preventDefault","youAreBlockedSpan","isBlockedSpan","empty","_ref3","globalLink","markGlobalChatAsRead","global","glob","_chat$user$avatar","_chat$user1","_chat$user10","_chat$user11","_getLastInboxMessage3","_getLastInboxMessage4","_chat$user12","_chat$user13","_chat$user14","_chat$user15","_ref4","_chat$user9","_chat$user0","avatar","roby","onError","setTimeout","prev","handleImageError","placeholder","required","handleChange","width","value","paddingLeft","autoComplete","handleBlur","textarea","commonProps","style","onChange","onBlur","rows","ChatsAside","noReadRef","isNoReadVisible","setIsNoReadVisible","setSearch","notReadMessagesChats","aside","asideContent","newMsgCont","asideNewMesgBtn","FaEnvelope","newMsgSvg","listCont","closeButton","ChatInput","asideInput","asideInputButton","FontAwesomeIcon","asideInputSearchIcon","icon","faMagnifyingGlass","asideChatListCont","ChatsList","ActiveChatModal","closeModal","Link","_selectedChat$user","selectedChat","showModal","setShowModal","toggleModal","FaEllipsisH","_user$user","_user$user2","_user$user3","_user$user4","_user$user5","_user$user6","_user$user7","_user$user8","_user$user9","fileInputRef","blockRef","message","setMessage","showEmojiPicker","setShowEmojiPicker","file","setFile","showBlockMsg","setShowBlockMsg","showYouAreBlockMsg","setShowYouAreBlockMsg","u","localStorage","getItem","ChatHeader","Outlet","context","handleAttachClick","click","FaPaperclip","selectedFile","files","display","toggleEmojiPicker","FaRegSmile","EmojiPicker","onEmojiClick","emojiData","emoji","height","previewConfig","showPreview","searchPlaceHolder","_user$user0","_user$user1","_user$user10","_user$user11","_user$user12","trim","updateChat","newMessages","crypto","randomUUID","toISOString","FaPaperPlane"],"sourceRoot":""}