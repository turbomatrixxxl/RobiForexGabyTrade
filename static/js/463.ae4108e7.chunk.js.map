{"version":3,"file":"static/js/463.ae4108e7.chunk.js","mappings":"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","sources":["webpack://my-react-app/./src/components/commonComponents/RobotCard/RobotCard.module.css?0873","components/commonComponents/RobotCard/index.js","components/commonComponents/RobotCard/RobotCard.jsx","webpack://my-react-app/./src/pages/RobotsPage/RobotsPage.module.css?e9bc","pages/RobotsPage/index.js","pages/RobotsPage/RobotsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"RobotCard_cont__I4D4f\",\"name\":\"RobotCard_name__ERb1E\",\"usersCardRobot\":\"RobotCard_usersCardRobot__OE6ni\",\"robotAvatar\":\"RobotCard_robotAvatar__oEiqs\",\"img\":\"RobotCard_img__VRMUa\",\"robotStatus\":\"RobotCard_robotStatus__wARas\",\"selectBot\":\"RobotCard_selectBot__mnZuV\",\"selectBotActive\":\"RobotCard_selectBotActive__sDc6y\",\"violetTh\":\"RobotCard_violetTh__P7sxu\",\"violetThBtn\":\"RobotCard_violetThBtn__ZqTWf\"};","import RobotCard from \"./RobotCard\";\n\nexport default RobotCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport roby from \"../../../images/Roby.jpg\";\n\nimport clsx from \"clsx\";\n\nimport styles from \"./RobotCard.module.css\";\n\nexport default function RobotCard({\n  theme,\n  handleClick,\n  name,\n  position,\n  isSelected,\n  user,\n}) {\n  return (\n    <div className={styles.cont}>\n      <div className={clsx(styles.name, theme === \"violet\" && styles.violetTh)}>\n        {name}\n      </div>\n      <div\n        className={clsx(\n          styles.usersCardRobot,\n          theme === \"violet\" && styles.violetTh\n        )}>\n        {user ? user.username : \"tradegaby19\"}\n      </div>\n      <div className={styles.robotAvatar}>\n        <img\n          className={styles.img}\n          src={user ? user.avatarBase64 : roby}\n          alt=\"cBot Avatar\"\n        />\n      </div>\n      <div\n        className={clsx(\n          styles.robotStatus,\n          theme === \"violet\" && styles.violetTh\n        )}>\n        <span>☁️</span>\n        <span className={styles.position}>{position}</span>\n      </div>\n      <button\n        className={clsx(\n          styles.selectBot,\n          theme === \"violet\" && styles.violetThBtn,\n          isSelected && styles.selectBotActive\n        )}\n        onClick={handleClick}>\n        {isSelected ? `${name} selected` : `Choose ${name}`}\n      </button>\n    </div>\n  );\n}\n\nRobotCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  position: PropTypes.number,\n  isSelected: PropTypes.bool,\n  theme: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"RobotsPage_cont__osDCW\",\"lightCont\":\"RobotsPage_lightCont__mSdPN\",\"darkCont\":\"RobotsPage_darkCont__TYnuY\",\"violetCont\":\"RobotsPage_violetCont__w+6-t\"};","import RobotsPage from \"./RobotsPage\";\n\nexport default RobotsPage;\n","import React, { useState, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\nimport RobotCard from \"../../components/commonComponents/RobotCard\";\nimport styles from \"./RobotsPage.module.css\";\n\nexport default function RobotsPage() {\n  const [isSelectedId, setIsSelectedId] = useState(null);\n  const theme = localStorage.getItem(\"theme\") || \"dark\";\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n\n  const [robots, setRobots] = useState(() => {\n    const raw = localStorage.getItem(\"cBots\");\n    const parsed = raw ? JSON.parse(raw) : [];\n\n    const makeId = () => {\n      if (crypto && crypto.randomUUID) return crypto.randomUUID();\n      return `rid_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;\n    };\n\n    const withIds = parsed.map((r) => ({\n      ...r,\n      id: r.id ?? makeId(),\n    }));\n\n    // salvăm ID-urile generate în localStorage\n    localStorage.setItem(\"cBots\", JSON.stringify(withIds));\n    return withIds;\n  });\n\n  // Funcție comună pentru recitire date\n  const syncFromLocalStorage = () => {\n    const rawBots = localStorage.getItem(\"cBots\");\n    const parsedBots = rawBots ? JSON.parse(rawBots) : [];\n    setRobots(parsedBots);\n\n    const rawSelected = localStorage.getItem(\"cBotSelected\");\n    if (rawSelected) {\n      try {\n        const parsedSelected = JSON.parse(rawSelected);\n        setIsSelectedId(parsedSelected.id || null);\n      } catch (e) {\n        console.error(\"Eroare parsare cBotSelected:\", e);\n      }\n    }\n  };\n\n  useEffect(() => {\n    syncFromLocalStorage();\n  }, []);\n\n  useEffect(() => {\n    const handleStorageChange = (e) => {\n      if (e.key === \"cBots\" || e.key === \"cBotSelected\") {\n        syncFromLocalStorage();\n      }\n    };\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"cBots\", JSON.stringify(robots));\n  }, [robots]);\n\n  function handleSelectRobot(id) {\n    setIsSelectedId(id);\n    const selectedRobot = robots.find((r) => r.id === id);\n    if (selectedRobot) {\n      localStorage.setItem(\"cBotSelected\", JSON.stringify(selectedRobot));\n    }\n  }\n\n  function handleDragEnd(result) {\n    if (!result.destination) return;\n\n    const reordered = Array.from(robots);\n    const [moved] = reordered.splice(result.source.index, 1);\n    reordered.splice(result.destination.index, 0, moved);\n\n    setRobots(reordered);\n    localStorage.setItem(\"cBots\", JSON.stringify(reordered));\n  }\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <Droppable droppableId=\"robotsDroppable\">\n        {(provided) => (\n          <div\n            className={clsx(\n              styles.cont,\n              theme === \"light\"\n                ? styles.lightCont\n                : theme === \"violet\"\n                ? styles.violetCont\n                : styles.darkCont\n            )}\n            {...provided.droppableProps}\n            ref={provided.innerRef}>\n            {robots.map((robot, i) => (\n              <Draggable key={robot.id} draggableId={robot.id} index={i}>\n                {(provided) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}>\n                    <RobotCard\n                      user={user || null}\n                      position={i + 1}\n                      name={robot.cBotName}\n                      handleClick={() => handleSelectRobot(robot.id)}\n                      isSelected={isSelectedId === robot.id}\n                      theme={theme}\n                    />\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\n"],"names":["_ref","theme","handleClick","name","position","isSelected","user","_jsxs","className","styles","cont","children","_jsx","clsx","violetTh","usersCardRobot","username","robotAvatar","img","src","avatarBase64","roby","alt","robotStatus","selectBot","violetThBtn","selectBotActive","onClick","concat","isSelectedId","setIsSelectedId","useState","localStorage","getItem","JSON","parse","robots","setRobots","raw","parsed","withIds","map","r","_r$id","_objectSpread","id","crypto","randomUUID","Date","now","Math","random","toString","slice","setItem","stringify","syncFromLocalStorage","rawBots","parsedBots","rawSelected","parsedSelected","e","console","error","useEffect","handleStorageChange","key","window","addEventListener","removeEventListener","DragDropContext","onDragEnd","result","destination","reordered","Array","from","moved","splice","source","index","Droppable","droppableId","provided","droppableProps","ref","innerRef","robot","i","Draggable","draggableId","draggableProps","dragHandleProps","RobotCard","cBotName","selectedRobot","find","handleSelectRobot","placeholder"],"sourceRoot":""}