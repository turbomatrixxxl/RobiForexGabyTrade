{"version":3,"file":"static/js/463.22398092.chunk.js","mappings":"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","sources":["webpack://my-react-app/./src/components/commonComponents/RobotCard/RobotCard.module.css?0873","components/commonComponents/RobotCard/index.js","components/commonComponents/RobotCard/RobotCard.jsx","webpack://my-react-app/./src/pages/RobotsPage/RobotsPage.module.css?e9bc","pages/RobotsPage/index.js","pages/RobotsPage/RobotsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"RobotCard_cont__I4D4f\",\"name\":\"RobotCard_name__ERb1E\",\"usersCardRobot\":\"RobotCard_usersCardRobot__OE6ni\",\"robotAvatar\":\"RobotCard_robotAvatar__oEiqs\",\"img\":\"RobotCard_img__VRMUa\",\"robotStatus\":\"RobotCard_robotStatus__wARas\",\"selectBot\":\"RobotCard_selectBot__mnZuV\",\"selectBotActive\":\"RobotCard_selectBotActive__sDc6y\"};","import RobotCard from \"./RobotCard\";\n\nexport default RobotCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport roby from \"../../../images/Roby.jpg\";\n\nimport styles from \"./RobotCard.module.css\";\nimport clsx from \"clsx\";\n\nexport default function RobotCard({ handleClick, name, position, isSelected }) {\n  return (\n    <div className={styles.cont}>\n      <div className={styles.name}>{name}</div>\n      <div className={styles.usersCardRobot}>tradegaby19</div>\n      <div className={styles.robotAvatar}>\n        <img className={styles.img} src={roby} alt=\"cBot Avatar\" />\n      </div>\n      <div className={styles.robotStatus}>\n        <span>☁️</span>\n        <span className={styles.position}>{position}</span>\n      </div>\n      <button\n        className={clsx(styles.selectBot, isSelected && styles.selectBotActive)}\n        onClick={handleClick}>\n        Choose {name}\n      </button>\n    </div>\n  );\n}\n\nRobotCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  position: PropTypes.number,\n  isSelected: PropTypes.bool,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"RobotsPage_cont__osDCW\",\"lightCont\":\"RobotsPage_lightCont__mSdPN\",\"darkCont\":\"RobotsPage_darkCont__TYnuY\",\"violetCont\":\"RobotsPage_violetCont__w+6-t\"};","import RobotsPage from \"./RobotsPage\";\n\nexport default RobotsPage;\n","// import React, { useState } from \"react\";\n\n// import clsx from \"clsx\";\n\n// import RobotCard from \"../../components/commonComponents/RobotCard\";\n\n// import styles from \"./RobotsPage.module.css\";\n\n// export default function RobotsPage() {\n//   const [isSelectedIndex, setIsSelectedIndex] = useState(null);\n\n//   const theme = localStorage.getItem(\"theme\") || \"dark\";\n\n//   const robots = localStorage.getItem(\"cBots\")\n//     ? JSON.parse(localStorage.getItem(\"cBots\"))\n//     : [];\n//   // console.log(\"robots\", robots);\n\n//   function handleSelectRobot(index) {\n//     setIsSelectedIndex(index);\n//     console.log(`Robot ${robots[index].cBotName} selected !`);\n//   }\n\n//   return (\n//     <div\n//       className={clsx(\n//         styles.cont,\n//         theme === \"light\"\n//           ? styles.lightCont\n//           : theme === \"violet\"\n//           ? styles.violetCont\n//           : styles.darkCont\n//       )}>\n//       {robots.map((robot, i) => (\n//         <div key={`robot${i}`}>\n//           <RobotCard\n//             position={i + 1}\n//             name={robot.cBotName}\n//             handleClick={() => handleSelectRobot(i)}\n//             isSelected={isSelectedIndex === i}\n//           />\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\n\nimport RobotCard from \"../../components/commonComponents/RobotCard\";\nimport styles from \"./RobotsPage.module.css\";\n\nfunction ensureIds(list) {\n  const makeId =\n    crypto && crypto.randomUUID\n      ? () => crypto.randomUUID()\n      : () => `rid_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;\n\n  return list.map((r) => ({\n    ...r,\n    id: r.id ?? makeId(),\n  }));\n}\n\nexport default function RobotsPage() {\n  const [isSelectedIndex, setIsSelectedIndex] = useState(null);\n  const theme = localStorage.getItem(\"theme\") || \"dark\";\n\n  const [robots, setRobots] = useState(() => {\n    const raw = localStorage.getItem(\"cBots\");\n    const parsed = raw ? JSON.parse(raw) : [];\n    return ensureIds(parsed);\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"cBots\", JSON.stringify(robots));\n  }, [robots]);\n\n  function handleSelectRobot(index) {\n    setIsSelectedIndex(index);\n    console.log(`Robot ${robots[index].cBotName} selected !`);\n  }\n\n  function handleDragEnd(result) {\n    if (!result.destination) return;\n\n    const reordered = Array.from(robots);\n    const [moved] = reordered.splice(result.source.index, 1);\n    reordered.splice(result.destination.index, 0, moved);\n\n    setRobots(reordered);\n  }\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <Droppable droppableId=\"robotsDroppable\">\n        {(provided) => (\n          <div\n            className={clsx(\n              styles.cont,\n              theme === \"light\"\n                ? styles.lightCont\n                : theme === \"violet\"\n                ? styles.violetCont\n                : styles.darkCont\n            )}\n            {...provided.droppableProps}\n            ref={provided.innerRef}>\n            {robots.map((robot, i) => (\n              <Draggable key={robot.id} draggableId={robot.id} index={i}>\n                {(provided) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}>\n                    <RobotCard\n                      position={i + 1}\n                      name={robot.cBotName}\n                      handleClick={() => handleSelectRobot(i)}\n                      isSelected={isSelectedIndex === i}\n                    />\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\n"],"names":["_ref","handleClick","name","position","isSelected","_jsxs","className","styles","cont","children","_jsx","usersCardRobot","robotAvatar","img","src","roby","alt","robotStatus","clsx","selectBot","selectBotActive","onClick","isSelectedIndex","setIsSelectedIndex","useState","theme","localStorage","getItem","robots","setRobots","raw","list","makeId","crypto","randomUUID","concat","Date","now","Math","random","toString","slice","map","r","_r$id","_objectSpread","id","ensureIds","JSON","parse","useEffect","setItem","stringify","DragDropContext","onDragEnd","result","destination","reordered","Array","from","moved","splice","source","index","Droppable","droppableId","provided","droppableProps","ref","innerRef","robot","i","Draggable","draggableId","draggableProps","dragHandleProps","RobotCard","cBotName","handleSelectRobot","console","log","placeholder"],"sourceRoot":""}